var search_data = {"index":{"searchIndex":["applicationcontroller","categoriescontroller","category","sessionscontroller","staticpagescontroller","status","statusescontroller","task","tasklist","tasklistscontroller","tasklistshelper","king","taskscontroller","user","userscontroller","usershelper","ranking","calculate_by()","calculate_by()","create()","create()","create()","crowns()","crowns_by()","current()","destroy()","destroy()","destroy()","done_percentage()","done_text()","due_date_f()","due_date_short()","edit()","facebook()","facebook_at()","facebook_note_assign()","facebook_note_status()","facebook_put_to_wall()","facebook_ut()","fb()","finished()","friends()","from_omniauth()","get()","index()","index()","index()","index()","new()","open_tasks()","owner()","points()","ranking()","show()","show()","start()","update()","update()","readme"],"longSearchIndex":["applicationcontroller","categoriescontroller","category","sessionscontroller","staticpagescontroller","status","statusescontroller","task","tasklist","tasklistscontroller","tasklistshelper","tasklistshelper::king","taskscontroller","user","userscontroller","usershelper","usershelper::ranking","tasklistshelper::king::calculate_by()","usershelper::ranking::calculate_by()","sessionscontroller#create()","tasklistscontroller#create()","taskscontroller#create()","userscontroller#crowns()","usershelper::ranking::crowns_by()","userscontroller#current()","sessionscontroller#destroy()","tasklistscontroller#destroy()","taskscontroller#destroy()","tasklist#done_percentage()","tasklist#done_text()","task#due_date_f()","task#due_date_short()","taskscontroller#edit()","user#facebook()","taskscontroller#facebook_at()","taskscontroller#facebook_note_assign()","taskscontroller#facebook_note_status()","tasklistscontroller#facebook_put_to_wall()","tasklistscontroller#facebook_ut()","staticpagescontroller#fb()","status::finished()","user#friends()","user::from_omniauth()","taskscontroller#get()","categoriescontroller#index()","statusescontroller#index()","tasklistscontroller#index()","taskscontroller#index()","taskscontroller#new()","tasklist#open_tasks()","task#owner()","user#points()","userscontroller#ranking()","tasklistscontroller#show()","taskscontroller#show()","staticpagescontroller#start()","tasklistscontroller#update()","taskscontroller#update()",""],"info":[["ApplicationController","","ApplicationController.html","","<p>Main Controller\n"],["CategoriesController","","CategoriesController.html","","<p>Category controller (just reading operations)\n"],["Category","","Category.html","","<p>Category view\n"],["SessionsController","","SessionsController.html","","<p>Controller to load user in session\n"],["StaticPagesController","","StaticPagesController.html","","<p>Controler for startpage\n"],["Status","","Status.html","","<p>Status Model (Just reading)\n"],["StatusesController","","StatusesController.html","","<p>Controller for reading Statuses\n"],["Task","","Task.html","","<p>Task Model (read, write operations)\n"],["Tasklist","","Tasklist.html","","<p>Tasklist model\n"],["TasklistsController","","TasklistsController.html","","<p>Controller for Tasklists\n"],["TasklistsHelper","","TasklistsHelper.html","","<p>TasklistHelpers\n"],["TasklistsHelper::King","","TasklistsHelper/King.html","","<p>Methods for the king functionality\n"],["TasksController","","TasksController.html","",""],["User","","User.html","","<p>User model\n"],["UsersController","","UsersController.html","","<p>User Controller, used to show current user and ranking\n"],["UsersHelper","","UsersHelper.html","","<p>User Helper methods\n"],["UsersHelper::Ranking","","UsersHelper/Ranking.html","","<p>Class for Ranking methods\n"],["calculate_by","TasklistsHelper::King","TasklistsHelper/King.html#method-c-calculate_by","(tasklist)","<p>Calculates the king of a tasklist\n"],["calculate_by","UsersHelper::Ranking","UsersHelper/Ranking.html#method-c-calculate_by","(user)","<p>Calculates ranking based by user and his friends @param user user object\n@return List of users sorted …\n"],["create","SessionsController","SessionsController.html#method-i-create","()","<p>Creates the user sesssion and redirects to close page\n"],["create","TasklistsController","TasklistsController.html#method-i-create","()","<p>POST /tasklists POST /tasklists.json Creates a new Tasklist with\ncurrent_user\n"],["create","TasksController","TasksController.html#method-i-create","()","<p>POST /tasks POST /tasks.json\n"],["crowns","UsersController","UsersController.html#method-i-crowns","()","<p>GET/users/ranking @return a JSON list ordered by crowns\n"],["crowns_by","UsersHelper::Ranking","UsersHelper/Ranking.html#method-c-crowns_by","(user)","<p>Calculates crown ranking based by user and his friends @param user user\nobject @return List of users …\n"],["current","UsersController","UsersController.html#method-i-current","()","<p>GET/users/ranking @return a JSON representation of the user\n"],["destroy","SessionsController","SessionsController.html#method-i-destroy","()","<p>Destroys the user and redirect to close page\n"],["destroy","TasklistsController","TasklistsController.html#method-i-destroy","()","<p>DELETE /tasklists/1 DELETE /tasklists/1.json Deletes a tasklist\n"],["destroy","TasksController","TasksController.html#method-i-destroy","()","<p>DELETE /tasks/1 DELETE /tasks/1.json\n"],["done_percentage","Tasklist","Tasklist.html#method-i-done_percentage","()","<p>Calculates percentage of done Tasks @return Integer 0 &lt;= x &lt;= 100\n"],["done_text","Tasklist","Tasklist.html#method-i-done_text","()","<p>Returns text of how many tasks are done @return STring\n"],["due_date_f","Task","Task.html#method-i-due_date_f","()","<p>Formats the date  @return String @example\n<p>&gt; in 4 days\n<p>&gt; before 3 hours\n"],["due_date_short","Task","Task.html#method-i-due_date_short","()","<p>Formats the date @return String @example 10.12.2013 10:15\n"],["edit","TasksController","TasksController.html#method-i-edit","()","<p>GET /tasks/1/edit\n"],["facebook","User","User.html#method-i-facebook","()","<p>generates a facebook object\n"],["facebook_at","TasksController","TasksController.html#method-i-facebook_at","()",""],["facebook_note_assign","TasksController","TasksController.html#method-i-facebook_note_assign","()",""],["facebook_note_status","TasksController","TasksController.html#method-i-facebook_note_status","()",""],["facebook_put_to_wall","TasklistsController","TasklistsController.html#method-i-facebook_put_to_wall","()","<p>def facebook_notification\n\n<pre>facebook_at.put_connections(User.find_by_id(@tasklist.king_id).uid,&quot;notifications&quot;,template: ...</pre>\n"],["facebook_ut","TasklistsController","TasklistsController.html#method-i-facebook_ut","()","<p>def facebook_at\n\n<pre>@facebook_at = Koala::Facebook::API.new(Koala::Facebook::OAuth.new().get_app_access_token) ...</pre>\n"],["fb","StaticPagesController","StaticPagesController.html#method-i-fb","()","<p>Facebook landing page\n"],["finished","Status","Status.html#method-c-finished","()","<p>Constant for finished Task @return [Integer] Status id of finished status\n"],["friends","User","User.html#method-i-friends","()","<p>Retrive the list of registrated facebook friends of the user\n"],["from_omniauth","User","User.html#method-c-from_omniauth","(auth)","<p>creates a user by facebook auth\n"],["get","TasksController","TasksController.html#method-i-get","()","<p>GET /tasks/get GET /tasks/get.json\n"],["index","CategoriesController","CategoriesController.html#method-i-index","()","<p>GET /categories GET /categories.json @return a JSON list of categories\n"],["index","StatusesController","StatusesController.html#method-i-index","()","<p>GET /statuses GET /statuses.json @return JSON list of statuses\n"],["index","TasklistsController","TasklistsController.html#method-i-index","()","<p>GET /tasklists GET /tasklists.json @return a JSON list with all tasks the\ncurrent_user has created\n"],["index","TasksController","TasksController.html#method-i-index","()","<p>GET /tasks GET /tasks.json\n"],["new","TasksController","TasksController.html#method-i-new","()","<p>GET /tasks/new\n"],["open_tasks","Tasklist","Tasklist.html#method-i-open_tasks","()","<p>Returns list of open task\n"],["owner","Task","Task.html#method-i-owner","()","<p>Returns owner of the task @return User model object\n"],["points","User","User.html#method-i-points","()","<p>Calculates the sum of poinvalues of the user.\n"],["ranking","UsersController","UsersController.html#method-i-ranking","()","<p>GET/users/ranking @return a JSON list of users ordered by ranking\n"],["show","TasklistsController","TasklistsController.html#method-i-show","()","<p>GET /tasklists/1 GET /tasklists/1.json @return a JSON representation of the\ntasklist\n"],["show","TasksController","TasksController.html#method-i-show","()","<p>GET /tasks/1 GET /tasks/1.json\n"],["start","StaticPagesController","StaticPagesController.html#method-i-start","()","<p>Default start page\n"],["update","TasklistsController","TasklistsController.html#method-i-update","()","<p>PATCH/PUT /tasklists/1 PATCH/PUT /tasklists/1.json Updates a tasklist and\nsets the king\n"],["update","TasksController","TasksController.html#method-i-update","()","<p>PATCH/PUT /tasks/1 PATCH/PUT /tasks/1.json\n"],["README","","README_rdoc.html","","<p>README\n<p>This README would normally document whatever steps are necessary to get the\napplication up and …\n"]]}}